{"pageProps":{"postData":{"slug":["2022","abi-playground"],"contentRaw":"\n[ABI Playground](/abi-playground)\nis a tool that allows for quick and easy interacting with deployed contracts\nwithout a verified source.\n\nThis is what the interface looks like:\n\n![demo](/data/blog/2022/abi-playground/demo.png)\n\nYou can click on the **?-symbol** next to the title to **fill in the example** for you.\nIt enters in the contract address of TheDAO and a few functions as an example.\n\n![demo](/data/blog/2022/abi-playground/demo2.png)\n\nThe ABI-section allows you to **fetch the ABI from etherscan** if it's available or import common ABIs.\n\n![demo](/data/blog/2022/abi-playground/demo3.png)\n\nYou can either enter a full ABI in JSON format, or **you can simply write function declarations yourself,\nlike in the example**.\n\n![demo](/data/blog/2022/abi-playground/demo4.png)\n\nThe _Functions_ section is generated automatically from the ABI.\nTo send a request, click on the function name.\nThe function's arguments are in between the parentheses along with their variable names if given.\nIf a variable is of type `address`, the \\*-symbol can be used to insert\nyour own address.\n\nOnce the ABI and an address has been entered, **the contract (along with the ethers library) can also be accessed by opening up the\ndeveloper console**.\n\n![demo](/data/blog/2022/abi-playground/demo5.png)\n\nThe variables after the arrow are the returned variables.\nNote that, **only constant (i.e. non-state-modifying/view) functions will return data**.\n\n- _View_ functions are marked <span class='text-primary-400'>blue</span>\n- _State-modifying_ functions are marked <span class='text-orange-300'>orange</span>\n- _Payable_ functions are in <span class='text-red-400'>red</span>\n\nIn order to receive an output from a state-modifying function (orange and red) they need to be called as a static request.\nThis can be achieved by either changing the definition in the ABI, i.e. adding the _view_ declaration.\nOr this can be done in the Low-Level Call section.\nThe Low-Level Call data is automatically updated by modifying function arguments, or by clicking\non the icon to the left of a function.\n\n![demo](/data/blog/2022/abi-playground/demo6.png)\n\nThis section shows the full transaction data that is submitted\nand can be directly modified. **It can therefore also be used for deploying contracts\nby copying the deployment bytecode or it can be used to directly execute raw bytecode**.\nThis can come in handy for some of the [Ethernaut challenges](https://ethernaut.openzeppelin.com/).\n\n![demo](/data/blog/2022/abi-playground/demo7.png)\n\nThe response is decoded if any return values were specified.\nIndividual values can be copied by clicking on the types to the left.\n\n![demo](/data/blog/2022/abi-playground/demo8.png)\n\nThe full response data (broken up in 32 bytes chunks) can be inspected in the Low-Level Call section.\nThe full data can be copied by clicking on 'data' on the top.\n\n[Try it out!](/abi-playground) I'm happy for any feed-back.\n\nSpecial thanks to the team developing the [ethersjs](https://docs.ethers.io/).\nThis is just a fancy interface built on-top of it.\n","title":"ABI Playground","date":"2022-3-9","excerpt":"A tool for quickly interacting with deployed contracts. No ABI needed!"}},"__N_SSG":true}