{"pageProps":{"postData":{"slug":["knowledge","open"],"contentRaw":"\n\n# How is metering measured? \nXXX\n\n# What is turing completeness?\n\nSystem/Program has enough power of expression to be equivalent to a turing machine.\n\n**Turing machine:** Mathematical model describing an abstract machine that can change symbols on a strip of tape according to a table of rules. Capable to implement every computer program.\n\nSome requirements:\n- supports input/output\n- conditional branching\n- infinite loops\n- can use infinite memory (memory limitations often ignored for computer languages)\n- halting problem is unavoidable\n\n# What is the halting problem?\n\nTuring used the turing machine to answer the question of whether an algorithm could exist that is able to determine whether a computer program stops at some point or continues on for ever.\n\nExample:\nChecker app checks whether program M halts\n- approve if M halts\n- reject if M loops\n\nConstruct Paradox app:\nRun Checker app on Paradox app and loop if Check(M) = good. Halt if Check(M) = bad.\n- if Paradox halts => Check(P) = bad, but that means that P should have looped\n- if Paradox loops => Check(P) = good, but that means that P should have halted\n\n\n\n# What is the DAO hack?\n\n# Explain UTXO account structure. \n\n2. Explain proof of stake. How are validators selected in the network (Ethereum)? \n3. Explain other consensus mechanisms and how they work\n----- Solidity -------\n1. Name a common vulnerability\n2. How would you mitigate it\n3. What are potential attack vectors for (here they listed of random shit, eg reentrancy, tx.origin phising, unitialized storage pointer pre 0.8.1, safemath, etc) and how would you mitigate them?\n4. Questions on defi attack vectors (eg DoS through strict equalities, flash loan attacks, uniswap invariant maintenance,  how to get the price of an LP token correctly (warp finance hack)) \n5. Explain one recent defi hack and what you thought about it (I chose cream finance hack, big fucking mistake since it's probably one of the hardest, should have chose something basic like visor finance hack)\n---- EVM----\n1. contract creation, explain it, runtime vs init bytecode, create2 intricacies,\n2. EVM storage (data areas eg stack storage memory and differences)\n3. L2 intricacies\n4. Proxies (I did not do well on this one lol particularly ERC1967 proxy storage layout)\n5. what can/can't you do in a constructor\nobviously I'm missing a lot since I didn't memorize a 2 hour interview but these are probably fairly common questions you'd expect for a junior sec engineer position","title":"Unordered Notes","date":"Invalid Date"}},"__N_SSG":true}