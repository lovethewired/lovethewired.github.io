{"pageProps":{"postData":{"slug":["unpublished","fuel-message"],"contentRaw":"\n- [Intro](#intro)\n- [General Token Bridge Design](#general-token-bridge-design)\n\n# Intro\n\nIn XX 2023 we started a review of the Fuel protocol. In particular I was to look at the message portal and the token bridge. For the most part, cross-chain messaging protocols work very similar. The general procedure is that there is a singleton smart contract on the sending chain (Ethereum) dedicated to emitting arbitrary messages. Protocol validators listen to these messages and then broadcasted them to the receiving chain.\n\nThe message can be relayed through a smart contract on the receiving chain, but often is also relayed by a very specific address (e.g. the zero address on Polygon) or an aliased address (e.g. Arbitrum, Optimism add a fixed offset to any message sender's address).\n\nAs transmitting messages is often left very general, the specifics of a cross-chain token bridge require additional logic and validation.\n\nIn the case of Fuel\n\n# General Token Bridge Design\n\n```mermaid\nflowchart LR;\n    Validators([Validators])\n    Validators -.->|relay msg| PortalReceiver;\n    subgraph Fuel\n      PortalReceiver -.->|call| receiver;\n    end\n\n    User([User])\n    User -.->|send tx| PortalSender;\n    subgraph Ethereum\n      PortalSender -.->|emit msg| PortalSender;\n    end\n```\n\nIgnoring other transaction message values such as `gas`, `gasLimit`, `value` and nonce validation.\n\n```mermaid\nclassDiagram\n    class Message {\n        address sender\n        address receiver\n        bytes data\n    }\n```\n\nA token bridge requires extra validation logic to be handled by a `TokenBridgeSender` and a `TokenBridgeReceiver` contract.\n\n```mermaid\nflowchart LR;\n    Validators([Validators])\n    Validators -.->|relay msg| PortalReceiver;\n    subgraph Fuel\n      PortalReceiver -->|call| TokenBridgeReceiver;\n      TokenBridgeReceiver -.->|transfer token| receiver;\n    end\n\n    User([User])\n    User -.->|send tx| TokenBridgeSender;\n    subgraph Ethereum\n      TokenBridgeSender -->|call| PortalSender;\n      PortalSender -.->|emit msg| PortalSender;\n    end\n```\n\n```mermaid\nclassDiagram\n    class Message {\n        address sender : TokenBridgeSender\n        address receiver :  TokenBridgeReceiver\n        bytes data : enc(user, receiver, token, value)\n    }\n```\n","title":"Fuel message portal","date":"Dec 28, 2023","suptitle":null}},"__N_SSG":true}