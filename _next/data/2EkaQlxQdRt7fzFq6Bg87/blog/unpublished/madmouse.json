{"pageProps":{"postData":{"slug":["unpublished","madmouse"],"contentRaw":"\nWe've come a long way since the development on [MadMouse](https://madmousecircus.io/) started back in November.\n\nInitially, our contract was based on [ERC721A](https://www.erc721a.org/).\nWhile being extremely happy about new form of optimization that is brought to the NFT-space,\nwe immediately had [some improvements to make](https://github.com/chiru-labs/ERC721A/issues/18).\nHowever, it quickly became clear, that because of all its features,\nthe MadMouse contract has special needs and would need its own unique implementation.\n\nWhat we especially noticed was how inneficiently most staking contracts were implemented.\nWe definitely did not want to follow suit.\nThe worst thing for us would be if people had to pay\nincredibly high gas fees when interacting with our contracts.\nThat's why our top priority has always been to\nkeep the implementation as gas-efficient as possible,\nso not to exclude anyone from taking part in our ecosystem.\n\nTo be able to fit all of our auxilliary information into the contract\nwithout wasting extra storage slots (which ultimately are the main driver\nfor gas costs), we decided to pack all information using bitmaps.\n\nThis means that while our contract has all this extra functionality,\nthe storage costs (and thus all basic operation) remain the same as ERC721A's.\n**In fact, for some operations gas-costs are even less.**\n\nStaking in batches, for example, occurs by transferring in batches while minimizing storage reads and writes.\nThere is even the possibility to mint and stake at the same time, drastically reducing costs.\nThe token data in this case is implicitly stored, just like in ERC721A.\n\n## ERC721M comparisons\n\nWhat does all this mean for the end-user?\nLet's have a look at some gas comparisons.\nFor starters, here is a comparison with [Azuki](https://www.azuki.com/garden) (the ones behind ERC721A).\n\n![azuki-comparison](/data/blog/2022/madmouse/azuki.png)\n\nERC721M still holds up to ERC721A. The comparison is based on 5 mints. In all comparisons,\nthe first token is pre-minted to show unbiased results.\n\nOne of ERC721M's special features is that it comes with a **'mint & stake'** functionality.\nJust recently, [Metroverse](https://metroverse.com/) launched, also with the same ability.\nAlthough their contract isn't based on ERC721A's implicit storage, their contract is very optimized.\n\n![metroverse-comparison](/data/blog/2022/madmouse/metroverse.png)\n\nAgain, the data is based on a mint quantity of 5. We see that ERC721M extends the idea\nof ERC721A to allow direct staking without any overhead cost.\n**MadMouse's 'mint & stake' is about 5x cheaper than Metroverse**.\n\nWe tried hard to find a better comparison and to look for any\nimplementation that was based on ERC721A and allowed for staking.\nIn that regard, we found [Wabi Sabi](https://www.wabisabicollective.io/),\na collection that just launched this month.\n\n![wabisabi-comparison](/data/blog/2022/madmouse/wabisabi.png)\n\nHere, we showed what it would be like, if we didn't use the 'mint & stake' feature, but\nfirst had minted 5 NFTs and then in-turn staked those.\n\nStaking with ERC721A means that (like with a transfer), implicit token data has to be\nexplicitly set. That's why staking can seem more expensive at first.\nHowever, ERC721M still tries to optimize as much as possible under the hood.\nStaking is done similarly to a batch transfer, where state reads and writes are\nminimized as much as possible. In this case,\n**MadMouse is about 4x more efficient than Wabisabi**.\n\nWabiSabi keeps track of staked token ids in a list (as I've seen many other\ncollections do as well). Because of this, unstaking gas-costs\ncan quickly explode with higher numbers, due to the worst-case complexity being O(N^2).\n\n## What's next?\n\nSo, what's next for MadMouse? Does this become a community-standard?\nIn order to fit in all the features we wanted without adding extra storage,\nwe had to rely on some heavy engineering work\nthat could easily lead to complications if not handled with care.\n\nOur plans are to release an optimized build in the near future\nas an ERC721A extension, so that other projects can also make use of\nan efficient staking implementation for ERC721A.\n","title":"MadMouse.sol","suptitle":"ERC721A on steroids","date":"21 Mar 2022"}},"__N_SSG":true}